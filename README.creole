= The Marmalade Service - A package repository in EmacsLisp =

This is an EmacsLisp package to reimplement
the [[http://marmalade-repo.org|marmalade-repo]] with Elnode. Nathan
Weizenbaum wrote the
original [[http://marmalade-repo.org|marmalade-repo]] with node.js and
mongodb.

This reimplementation uses an [[http://elnode.org|Elnode]] application
dealing with a filesystem of all packages. It's basically a file
server app.

This packages includes conversion tools from the mongodb to the
filesystem.

These are the things marmalade should do:

* construct the package archive file from the package directory structure
** the package archive is an index of all the packages in the repository.
* allow the archive to be updated with uploads
* provide the ELPA {{{/package/}}} HTTP API for downloading packages
* provide HTML front end to the {{{/package/}}} HTTP API
* provide EmacsLisp front end to the {{{/package/}}} HTTP API
** this will likely be a separate project
* provide an HTML front end to the package archives with some discovery


== Current problems ==

=== Handling errors better ===

Here
is
[[https://github.com/nicferrier/elmarmalade/blob/master/marmalade-service.el#L150|the upload function]]

{{{
(let ((package-file-name
       (marmalade/save-package upload-file base-file-name)))
  (elnode-send-redirect httpcon package-file-name 201))
}}}

which calls
this
[[https://github.com/nicferrier/elmarmalade/blob/master/marmalade-service.el#L121|the save package function]]

{{{
(with-temp-file temp-package-file
  (insert-string
   (substring-no-properties package-data)))
;; Now get the real path
(marmalade/package-path temp-package-file))))
}}}

which makes a temp file and puts the package data in it and then
uses
[[https://github.com/nicferrier/elmarmalade/blob/master/marmalade-service.el#L121|this]]

{{{
(defun marmalade/package-path (package-file)
  "Turn PACKAGE-FILE into a repository package path."
  (let* ((info (marmalade/package-info package-file))
         (version (elt info 3))
}}}

which
uses
[[https://github.com/nicferrier/elmarmalade/blob/master/marmalade-service.el#L67|this]]
to get the meta data of the existing (temp) package file.


{{{
(defun marmalade/package-info (package-file)
  "Return the package-info on the PACKAGE-FILE.

PACKAGE-FILE is either an ELISP or a TAR file to be uploaded to
the package repository."
  (cond
    ((string-match "\\.el$" package-file)
     (with-temp-buffer
       (insert-file-contents-literally package-file)
       (buffer-string) ; leave it in so it's easy to debug
       (package-buffer-info)))
    ((string-match "\\.tar$" package-file)
     (package-tar-file-info package-file))
    (t (error "Unrecognized extension `%s'"
              (file-name-extension package-file)))))
}}}

And that, I think, is where a lot of error checking needs to be done
and reported from.

Currently we
have
[[https://github.com/nicferrier/elmarmalade/blob/master/marmalade-tests.el#L200|this]]
which tests the package save:


{{{
(ert-deftest marmalade/save-package ()
  "Test the save package stuff."
  (let ((marmalade-package-store-dir "/tmp/test-marmalade-dir"))
    (marmalade/package-file
     :code
     (let ((expected
            "/tmp/test-marmalade-dir/dummy-package/0.0.1/dummy-package-0.0.1.el"))
       (should
        (equal
         (marmalade/save-package
          package-content-string
          "dummy-package.el")
         expected))
       (should
        (equal
         (fakir-file-path package-file)
         expected))))))
}}}

It doesn't test much about it though. We need a lot of invalid
packages to be tested.


== Admin tasks ==

=== Syncing the mongodb dump from Marmalade v1 ===

Here's the cron I run to keep a local copy of marmalade:

{{{
rsync --bwlimit=20 -av \
      --files-from=<(ssh $MARMALADE_HOST find seville-marmalade/mongodump -cmin -60) \
      -e ssh $MARMALADE_HOST:. $DESTINATION_DIR
}}}

The dump is pretty big so I'm not getting the latest of
everything. Just the last hour and I run it twice a day.

=== Importing a mongodb dump from Marmalade v1 ===

Marmalade v1 dumps it's mongodb to a file every hour. I pull those
files to my house and then use them to setup a local copy of the
marmalade database that I use to generate the marmalade v2 filesystem.

How to restore the database:

{{{
mongorestore $DIRECTORY
}}}

the {{{$DIRECTORY}}} should be an individual full-dump directory.

=== Turning the mongodb into a file system ===

Presuming you have a mongodb with the database imported you can use
this script, which uses {{{mongofiles}}} to turn stuff into the
filesystem:

{{{
(setq package-user-dir (concat default-directory "elpa"))
(setq package-archives
      '(("gnu" . "http://elpa.gnu.org/packages/")
        ("marmalade" . "http://marmalade-repo.org/packages/")))
(package-initialize)
(package-refresh-contents)
(customize-set-variable 'marmalade-package-store-dir "~/work/marmalade/demo/packages")
(package-install 'marmalade-service)
(marmalade-mongo-main)
}}}

I put it in a file {{{demo.el}}} and the run it like this:

{{{
rm -rf elpa ; rm -rf demo ; emacs -Q -nw -l demo.el
}}}

To delete the {{{elpa}}} and {{{demo}}} directory created by the
script before recreating them.

== Sync the extracted file system ==

{{{mongofiles}}} doesn't update files, it just splats over them so you
need a smarter {{{rsync}}} to move them to another host:

{{{
rsync -cave ssh $MARMALADE_HOST:marmalade/packages/* marmalade/packages
}}}
